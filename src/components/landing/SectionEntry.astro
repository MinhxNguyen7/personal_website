---
import Text from "@/components/fundations/elements/Text.astro";

export interface Props {
  time: string;
  title: string;
  subtitle?: string;
  description: string;
  link?: string;
}

const { time, title, subtitle, description, link } = Astro.props;

const descriptionSections = description
  .split("\n")
  .map((section) => section.trim())
  .filter((section) => section.length > 0);

const isLink = !!link && link !== "#_";
const isExternalLink = isLink && !link.startsWith("/");

const timeIsDuration = time.includes("-");
const timeIsDurationMonths = timeIsDuration && time.split("-")[0].trim().length > 4;

const startTime = timeIsDuration ? time.split("-")[0].trim() : undefined;
const endTime = timeIsDuration ? time.split("-")[1].trim() : undefined;
---
<a
  href={isLink ? link : null} 
  target={isExternalLink ? "_blank" : null} 
  rel={isExternalLink ? "noopener noreferrer" : null}
>
  <article
    class="group relative grid grid-cols-1 gap-4 lg:grid-cols-3 lg:items-start"
  >
    <div
      class="absolute -inset-y-4 z-0 scale-95 bg-base-50 dark:bg-base-800/20 opacity-0 transition group-hover:scale-100 group-hover:opacity-100 -inset-x-4 rounded-2xl duration-300"
    />
    <div class="lg:col-span-2">

      <Text
        tag="h3"
        variant="textSM"
        class="font-medium tracking-tight text-base-900 dark:text-white"
      >
        {title}
      </Text>

      {subtitle && (
        <Text
          tag="h4"
          variant="textXS"
          class="text-base-700 dark:text-base-400"
        >
          {subtitle}
        </Text>
      )}

      <div class="relative z-10 mt-2 text-base-600 dark:text-base-500">
        {
          descriptionSections.map((section, index) => (
            <Text tag="p" variant="textXS">
              {section}
            </Text>
          ))
        }
      </div>

    </div>
      <div class=`
        ${timeIsDurationMonths ? "flex-col" : "flex-row"} 
        relative z-10 flex items-end text-sm lg:ml-auto
        text-base-600 dark:text-base-400`
      >
        {
          timeIsDuration
          ? (
            <Text variant="textXS">
              <time>{startTime}</time>
            </Text>
            <Text variant="textXS">
              -
            </Text>
            <Text variant="textXS">
              <time>{endTime}</time>
            </Text>
          )
          : (
            <Text variant="textXS">
              <time>{time}</time>
            </Text>
          )
        }
      </div>
  </article>
</a>
