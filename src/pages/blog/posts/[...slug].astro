---
export const prerender = true;

import { getCollection, render } from "astro:content";
import { Image } from "astro:assets";

import Text from "@/components/fundations/elements/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import BlogEntry from "@/components/blog/BlogEntry.astro";

import BaseLayout from "@/layouts/BaseLayout.astro";
import BlogHeader from "@/components/blog/BlogHeader.astro";

export async function getStaticPaths() {
  const blogEntries = await getCollection("posts");
  return blogEntries.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);

// Content
const { title, description, image, tags } = Astro.props.entry.data;
const slug = Astro.props.entry.id;

const allPosts = await getCollection("posts");

allPosts.sort(
  (a, b) =>
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
);

// Sort and filter posts based on overlapping tags
const tagsSet = new Set(tags);
const postScores: Record<string, number> = {};
allPosts.forEach((post) => {
  let score = 0;
  post.data.tags.forEach((tag) => {
    if (tagsSet.has(tag)) {
      score++;
    }
  });

  if (score > 0 && post.id !== slug) {
    postScores[post.id] = score;
  }
});

const relatedPosts = Object.entries(postScores)
  .sort((a, b) => b[1] - a[1]) // Sort by score
  .map(([postId]) => allPosts.find((post) => post.id === postId))
  .filter((post) => post !== undefined);
---

<BaseLayout
  seo={{
    title,
    description,
  }}
>
  <section>
    <Wrapper variant="standard">
      <div
        class="grid grid-cols-1 gap-4 md:grid-cols-3 border-b pb-8 pt-8 border-base-200 dark:border-base-800"
      >
        <BlogHeader
          title={title}
          description={description}
          tags={tags}
        />
        <div class="lg:col-span-2">
          {
            image ? (
              <Image
                width={1000}
                height={800}
                loading="eager"
                decoding="async"
                alt={image.alt}
                src={image.url}
                class="object-cover object-center w-full aspect-12/6 lg:col-span-2 rounded-xl"
              />
            ) : null
          }
          <Wrapper variant="prose">
            <Content />
          </Wrapper>
        </div>
      </div>
    </Wrapper>
  </section>
  {
    relatedPosts.length > 0 && (
      <section>
        <Wrapper variant="standard">
          <div class="grid grid-cols-1 gap-12 lg:gap-4 md:grid-cols-3 border-b py-8 border-base-200 dark:border-base-800">
            <Text
              tag="h2"
              variant="textBase"
              class="text-base-900 dark:text-white "
            >
              Related posts
            </Text>
            <div class="flex flex-col gap-12 lg:col-span-2">
              {relatedPosts.slice(0, 3).map((post) => (
                <BlogEntry post={post} />
              ))}
            </div>
          </div>
        </Wrapper>
      </section>
    )
  }
</BaseLayout>
